{
  "version": 3,
  "file": "drag-enabled.umd.min.js",
  "sources": [
    "ng://drag-enabled/out/src/app/drag-enabled/datatransfer.ts",
    "ng://drag-enabled/out/src/app/drag-enabled/drop.directive.ts",
    "ng://drag-enabled/out/src/app/drag-enabled/drag.directive.ts",
    "ng://drag-enabled/out/src/app/drag-enabled/drag-only.directive.ts",
    "ng://drag-enabled/out/src/app/drag-enabled/dragdrop.module.ts"
  ],
  "sourcesContent": [
    "/*\r\n * The main purpose for this object is to fix the short coming of drag event dataTransfer object.\r\n * It accepts only String values. However, if there is a need to pass an object, this singletoncan \r\n * come to the resecue. \r\n */\r\nimport { Injectable, Inject  } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class DataTransfer {\r\n    \r\n    private data: any = {};\r\n\r\n    constructor() {}\r\n\r\n    setData(name, value){\r\n        this.data[name] = value;\r\n    }\r\n\r\n    getData(name) {\r\n        return this.data[name];\r\n    }\r\n            \r\n}",
    "import {\r\n    Directive,\r\n    ElementRef,\r\n    HostListener,\r\n    Input,\r\n    Output,\r\n    Renderer,\r\n    EventEmitter\r\n} from '@angular/core';\r\n\r\nimport { DataTransfer } from './datatransfer';\r\nimport { DropEvent } from './drag-drop.interfaces';\r\n\r\n\r\n@Directive({\r\n    selector: '[dropEnabled]'\r\n})\r\nexport class DropDirective {\r\n    \r\n    @Input('medium')\r\n    medium: any;\r\n        \r\n    @Input()\r\n    dropEffect = \"move\";\r\n        \r\n    @Input(\"dropEnabled\")\r\n    dropEnabled = (event: DropEvent) => true;\r\n\r\n    @Output()\r\n    onDragEnter: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output()\r\n    onDragLeave: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output()\r\n    onDrop: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output()\r\n    onDragOver: EventEmitter<any> = new EventEmitter();\r\n\r\n    constructor(\r\n        private dataTransfer: DataTransfer,\r\n        private renderer: Renderer,\r\n        private el: ElementRef\r\n    ) {}\r\n    \r\n\tprivate createDropEvent(event): DropEvent {\r\n\t\treturn {\r\n            source: this.dataTransfer.getData(\"source\"),\r\n            destination: {\r\n                medium: this.medium,\r\n                node: this.el.nativeElement,\r\n                clientX: event.clientX,\r\n                clientY: event.clientY\r\n            }\r\n\t\t};\r\n\t}\r\n\r\n    @HostListener('drop', ['$event'])\r\n    drop(event) {\r\n        event.preventDefault();\r\n        const dropEvent = this.createDropEvent(event);\r\n\r\n        this.renderer.setElementClass(this.el.nativeElement, \"drag-over\", false);\r\n\r\n        if (this.dropEnabled(dropEvent)) {\r\n            this.onDrop.emit(dropEvent);\r\n        }\r\n    }\r\n    \r\n    @HostListener('dragenter', ['$event']) \r\n    dragEnter(event) {\r\n        event.preventDefault();\r\n        const dropEvent = this.createDropEvent(event);\r\n\r\n        if (this.dropEnabled(dropEvent)) {\r\n            event.dataTransfer.dropEffect = this.dropEffect;\r\n\r\n            this.renderer.setElementClass(this.el.nativeElement, \"drag-over\", true);\r\n            this.onDragEnter.emit(dropEvent);\r\n        } else {\r\n            this.renderer.setElementClass(this.el.nativeElement, \"drag-over\", false);\r\n        }\r\n    }\r\n    \r\n    @HostListener('dragleave', ['$event']) \r\n    dragLeave(event) {\r\n        event.preventDefault();\r\n                \r\n        this.renderer.setElementClass(this.el.nativeElement, \"drag-over\", false);\r\n        this.onDragLeave.emit(event);\r\n    }\r\n    \r\n    @HostListener('dragover', ['$event']) \r\n    dragOver(event) {\r\n        const dropEvent = this.createDropEvent(event);\r\n\r\n        if (this.dropEnabled(dropEvent)) {\r\n            event.preventDefault();\r\n            this.renderer.setElementClass(this.el.nativeElement, \"drag-over\", true);\r\n            this.onDragOver.emit(dropEvent);\r\n        } else {\r\n            this.renderer.setElementClass(this.el.nativeElement, \"drag-over\", false);\r\n        }\r\n    }\r\n}",
    "import {\r\n    Directive,\r\n    ElementRef,\r\n    HostListener,\r\n    Input,\r\n    Output,\r\n    EventEmitter,\r\n    Renderer\r\n} from '@angular/core';\r\nimport { DataTransfer } from './datatransfer';\r\nimport { DragEvent } from './drag-drop.interfaces';\r\n\r\n@Directive({\r\n    selector: '[dragEnabled]',\r\n    host: {\r\n        '[draggable]': 'true'\r\n    }\r\n})\r\nexport class DragDirective {\r\n    \r\n    @Input(\"medium\")\r\n    medium: any;\r\n    \r\n    @Input(\"dragEffect\")\r\n    dragEffect = \"move\";\r\n    \r\n    @Input(\"dragEnabled\")\r\n    dragEnabled = (event) => true;\r\n    \r\n    @Output()\r\n    onDragStart: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output()\r\n    onDragEnd: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output()\r\n    onDrag: EventEmitter<any> = new EventEmitter();\r\n    \r\n    private handle: any;\r\n        \r\n    constructor(\r\n        private dataTransfer: DataTransfer,\r\n        private renderer: Renderer,\r\n        private el: ElementRef\r\n    ) {\r\n    }\r\n\r\n    @HostListener('dragstart', ['$event']) \r\n    dragStart(event) {\r\n        event.stopPropagation();\r\n\r\n        const rect = this.el.nativeElement.getBoundingClientRect();\r\n        const dragEvent: DragEvent = {\r\n            medium: this.medium,\r\n            node: this.el.nativeElement,\r\n            clientX: event.clientX,\r\n            clientY: event.clientY,\r\n            offset: {\r\n                x: event.clientX - rect.left, \r\n                y: event.clientY - rect.top\r\n            }\r\n        }\r\n        if (this.dragEnabled(dragEvent)) {\r\n            event.dataTransfer.effectAllowed = this.dragEffect;\r\n            event.dataTransfer.setData(\"makeItTick\",\"true\");// this is needed just to make drag/drop event trigger.\r\n\r\n            this.dataTransfer.setData(\"source\", dragEvent);\r\n            this.onDragStart.emit(dragEvent);\r\n        }\r\n    }\r\n    \r\n    @HostListener('drag', ['$event']) \r\n    drag(event) {\r\n        const dragEvent: DragEvent = this.dataTransfer.getData(\"source\");\r\n\r\n        dragEvent.clientX = event.clientX;\r\n        dragEvent.clientY = event.clientY;\r\n        \r\n        if (this.dragEnabled(dragEvent)) {\r\n            this.onDrag.emit(dragEvent);\r\n        }\r\n    }\r\n    \r\n    @HostListener('dragend', ['$event']) \r\n    dragEnd(event) {\r\n        event.stopPropagation();\r\n        const dragEvent: DragEvent = this.dataTransfer.getData(\"source\");        \r\n        this.onDragEnd.emit(dragEvent);\r\n        this.renderer.setElementClass(this.el.nativeElement, \"drag-over\", false);\r\n    }\r\n}\r\n",
    "/*\r\n * This directive is best suited for dragging an element with confinement of document.  it is not recomended\r\n * to be used in conjunction with a drop operation if an element is to be dropped on another element within \r\n * a heirarchy of nodes.\r\n */\r\nimport {\r\n    Directive,\r\n    ElementRef,\r\n    HostListener,\r\n    Input,\r\n    Output,\r\n    EventEmitter,\r\n    Renderer\r\n} from '@angular/core';\r\nimport { DataTransfer } from './datatransfer';\r\n\r\nexport interface DragEvent {\r\n    medium: any,\r\n    node: HTMLElement,\r\n    clientX?: number,\r\n    clientY?: number,\r\n    offset?: {\r\n        x: number, \r\n        y: number\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[dragInDocument]',\r\n    host: {\r\n        '[draggable]': 'true'\r\n    }\r\n})\r\nexport class DragInDocumentDirective {\r\n    \r\n    @Input(\"medium\")\r\n    medium: any;\r\n    \r\n    @Input(\"dragEffect\")\r\n    dragEffect = \"move\";\r\n    \r\n    @Input(\"dragEnabled\")\r\n    dragEnabled = (event) => true;\r\n    \r\n    @Output()\r\n    onDragStart: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output()\r\n    onDragEnd: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output()\r\n    onDrag: EventEmitter<any> = new EventEmitter();\r\n    \r\n    private handle: any;\r\n        \r\n    constructor(\r\n        private dataTransfer: DataTransfer,\r\n        private renderer: Renderer,\r\n        private el: ElementRef\r\n    ) {\r\n    }\r\n\r\n    @HostListener('dragstart', ['$event']) \r\n    dragStart(event) {\r\n        event.stopPropagation();\r\n\r\n        const rect = this.el.nativeElement.getBoundingClientRect();\r\n        const dragEvent: DragEvent = {\r\n            medium: this.medium,\r\n            node: this.el.nativeElement,\r\n            clientX: event.clientX,\r\n            clientY: event.clientY,\r\n            offset: {\r\n                x: event.clientX - rect.left, \r\n                y: event.clientY - rect.top\r\n            }\r\n        }\r\n        if (this.dragEnabled(dragEvent)) {\r\n            event.dataTransfer.effectAllowed = this.dragEffect;\r\n            event.dataTransfer.setData(\"makeItTick\",\"true\");// this is needed just to make drag/drop event trigger.\r\n\r\n            this.dataTransfer.setData(\"source\", dragEvent);\r\n            this.onDragStart.emit(dragEvent);\r\n        }\r\n    }\r\n    \r\n    @HostListener('document:drag', ['$event']) \r\n    drag(event) {\r\n        const dragEvent: DragEvent = this.dataTransfer.getData(\"source\");\r\n\r\n        dragEvent.clientX = event.clientX;\r\n        dragEvent.clientY = event.clientY;\r\n        \r\n        if (this.dragEnabled(dragEvent)) {\r\n            this.onDrag.emit(dragEvent);\r\n        }\r\n    }\r\n    \r\n    @HostListener('document:dragend', ['$event']) \r\n    dragEnd(event) {\r\n        event.stopPropagation();\r\n        const dragEvent: DragEvent = this.dataTransfer.getData(\"source\");        \r\n        this.onDragEnd.emit(dragEvent);\r\n        this.renderer.setElementClass(this.el.nativeElement, \"drag-over\", false);\r\n    }\r\n}\r\n",
    "import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { DataTransfer } from './datatransfer';\r\nimport { DragDirective } from './drag.directive';\r\nimport { DragInDocumentDirective } from './drag-only.directive';\r\nimport { DropDirective } from './drop.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    DragDirective,\r\n    DragInDocumentDirective,\r\n\tDropDirective\r\n  ],\r\n  exports: [\r\n\tDragDirective,\r\n    DragInDocumentDirective,\r\n\tDropDirective\r\n  ],\r\n  entryComponents: [\r\n  ],\r\n  providers: [\r\n\tDragDirective,\r\n    DragInDocumentDirective,\r\n\tDropDirective,\r\n    DataTransfer\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\n\r\nexport class DragDropModule {}\r\n"
  ],
  "names": [
    "DataTransfer",
    "this",
    "data",
    "prototype",
    "setData",
    "name",
    "value",
    "getData",
    "type",
    "Injectable",
    "DropDirective",
    "dataTransfer",
    "renderer",
    "el",
    "dropEffect",
    "dropEnabled",
    "event",
    "onDragEnter",
    "EventEmitter",
    "onDragLeave",
    "onDrop",
    "onDragOver",
    "createDropEvent",
    "source",
    "destination",
    "medium",
    "node",
    "nativeElement",
    "clientX",
    "clientY",
    "drop",
    "preventDefault",
    "dropEvent",
    "setElementClass",
    "emit",
    "dragEnter",
    "dragLeave",
    "dragOver",
    "Directive",
    "args",
    "selector",
    "Renderer",
    "ElementRef",
    "Input",
    "Output",
    "HostListener",
    "DragDirective",
    "dragEffect",
    "dragEnabled",
    "onDragStart",
    "onDragEnd",
    "onDrag",
    "dragStart",
    "stopPropagation",
    "rect",
    "getBoundingClientRect",
    "dragEvent",
    "offset",
    "x",
    "left",
    "y",
    "top",
    "effectAllowed",
    "drag",
    "dragEnd",
    "host",
    "[draggable]",
    "DragInDocumentDirective",
    "DragDropModule",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports",
    "entryComponents",
    "providers",
    "schemas",
    "CUSTOM_ELEMENTS_SCHEMA"
  ],
  "mappings": "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"
}
