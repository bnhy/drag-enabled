{
  "version": 3,
  "file": "drag-enabled.umd.min.js",
  "sources": [
    "ng://drag-enabled/out/src/app/drag-enabled/datatransfer.ts",
    "ng://drag-enabled/out/src/app/drag-enabled/drop.directive.ts",
    "ng://drag-enabled/out/src/app/drag-enabled/drag.directive.ts",
    "ng://drag-enabled/out/src/app/drag-enabled/dragdrop.module.ts"
  ],
  "sourcesContent": [
    "/*\r\n * The main purpose for this object is to fix the short coming of drag event dataTransfer object.\r\n * It accepts only String values. However, if there is a need to pass an object, this singletoncan \r\n * come to the resecue. \r\n */\r\nimport { Injectable, Inject  } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class DataTransfer {\r\n    \r\n    private data: any = {};\r\n\r\n    constructor() {}\r\n\r\n    setData(name, value){\r\n        this.data[name] = value;\r\n    }\r\n\r\n    getData(name) {\r\n        return this.data[name];\r\n    }\r\n            \r\n}",
    "import {\r\n    Directive,\r\n    ElementRef,\r\n    HostListener,\r\n    Input,\r\n    Output,\r\n    Renderer,\r\n    EventEmitter\r\n} from '@angular/core';\r\n\r\nimport { DataTransfer } from './datatransfer';\r\n\r\nexport interface DropEvent {\r\n    source: {\r\n        medium: any,\r\n        node: HTMLElement,\r\n        cursorX?: number,\r\n        cursorY?: number,\r\n        offset?: {\r\n            x: number, \r\n            y: number\r\n        }\r\n    },\r\n    destination: {\r\n        medium: any,\r\n        node: HTMLElement,\r\n        cursorX?: number,\r\n        cursorY?: number\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[dropEnabled]'\r\n})\r\nexport class DropDirective {\r\n    \r\n    @Input('medium')\r\n    medium: any;\r\n        \r\n    @Input()\r\n    dropEffect = \"move\";\r\n        \r\n    @Input(\"dropEnabled\")\r\n    dropEnabled = (event: DropEvent) => true;\r\n\r\n    @Output()\r\n    onDragEnter: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output()\r\n    onDragLeave: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output()\r\n    onDrop: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output()\r\n    onDragOver: EventEmitter<any> = new EventEmitter();\r\n\r\n    constructor(\r\n        private dataTransfer: DataTransfer,\r\n        private renderer: Renderer,\r\n        private el: ElementRef\r\n    ) {}\r\n    \r\n\tprivate createDropEvent(event): DropEvent {\r\n\t\treturn {\r\n            source: this.dataTransfer.getData(\"source\"),\r\n            destination: {\r\n                medium: this.medium,\r\n                node: this.el.nativeElement,\r\n                cursorX: event.pageX ? event.pageX : event.clientX, // + document.body.scrollLeft + document.documentElement.scrollLeft\r\n                cursorY: event.pageY ? event.pageY : event.clientY, // + document.body.scrollTop + document.documentElement.scrollTop\r\n            }\r\n\t\t};\r\n\t}\r\n\r\n    @HostListener('drop', ['$event'])\r\n    drop(event) {\r\n        event.preventDefault();\r\n        const dropEvent = this.createDropEvent(event);\r\n\r\n        this.renderer.setElementClass(this.el.nativeElement, \"drag-over\", false);\r\n\r\n        if (this.dropEnabled(dropEvent)) {\r\n            this.onDrop.emit(dropEvent);\r\n        }\r\n    }\r\n    \r\n    @HostListener('dragenter', ['$event']) \r\n    dragEnter(event) {\r\n        event.preventDefault();\r\n        const dropEvent = this.createDropEvent(event);\r\n\r\n        if (this.dropEnabled(dropEvent)) {\r\n            event.dataTransfer.dropEffect = this.dropEffect;\r\n\r\n            this.renderer.setElementClass(this.el.nativeElement, \"drag-over\", true);\r\n            this.onDragEnter.emit(dropEvent);\r\n        } else {\r\n            this.renderer.setElementClass(this.el.nativeElement, \"drag-over\", false);\r\n        }\r\n    }\r\n    \r\n    @HostListener('dragleave', ['$event']) \r\n    dragLeave(event) {\r\n        event.preventDefault();\r\n                \r\n        this.renderer.setElementClass(this.el.nativeElement, \"drag-over\", false);\r\n        this.onDragLeave.emit(event);\r\n    }\r\n    \r\n    @HostListener('dragover', ['$event']) \r\n    dragOver(event) {\r\n        const dropEvent = this.createDropEvent(event);\r\n\r\n        if (this.dropEnabled(dropEvent)) {\r\n            event.preventDefault();\r\n            this.renderer.setElementClass(this.el.nativeElement, \"drag-over\", true);\r\n            this.onDragOver.emit(dropEvent);\r\n        } else {\r\n            this.renderer.setElementClass(this.el.nativeElement, \"drag-over\", false);\r\n        }\r\n    }\r\n}",
    "import {\r\n    Directive,\r\n    ElementRef,\r\n    HostListener,\r\n    Input,\r\n    Output,\r\n    EventEmitter,\r\n    Renderer\r\n} from '@angular/core';\r\nimport { DataTransfer } from './datatransfer';\r\n\r\nexport interface DragEvent {\r\n    medium: any,\r\n    node: HTMLElement,\r\n    cursorX?: number,\r\n    cursorY?: number,\r\n    offset?: {\r\n        x: number, \r\n        y: number\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[dragEnabled]',\r\n    host: {\r\n        '[draggable]': 'true'\r\n    }\r\n})\r\nexport class DragDirective {\r\n    \r\n    @Input(\"medium\")\r\n    medium: any;\r\n    \r\n    @Input(\"dragEffect\")\r\n    dragEffect = \"move\";\r\n    \r\n    @Input(\"dragEnabled\")\r\n    dragEnabled = (medium) => true;\r\n    \r\n    @Output()\r\n    onDragStart: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output()\r\n    onDragEnd: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output()\r\n    onDrag: EventEmitter<any> = new EventEmitter();\r\n    \r\n    private handle: any;\r\n        \r\n    constructor(\r\n        private dataTransfer: DataTransfer,\r\n        private renderer: Renderer,\r\n        private el: ElementRef\r\n    ) {\r\n    }\r\n\r\n    @HostListener('dragstart', ['$event']) \r\n    dragStart(event) {\r\n        event.stopPropagation();\r\n\r\n        const rect = this.el.nativeElement.getBoundingClientRect();\r\n        const X = event.pageX ? event.pageX : event.clientX;// + document.body.scrollLeft + document.documentElement.scrollLeft\r\n        const Y = event.pageY ? event.pageY : event.clientY;// + document.body.scrollTop + document.documentElement.scrollTop\r\n        const dragEvent: DragEvent = {\r\n            medium: this.medium,\r\n            node: this.el.nativeElement,\r\n            cursorX: X,\r\n            cursorY: Y,\r\n            offset: {\r\n                x: X - rect.left, \r\n                y: Y - rect.top\r\n            }\r\n        }\r\n        if (this.dragEnabled(dragEvent)) {\r\n            event.dataTransfer.effectAllowed = this.dragEffect;\r\n            event.dataTransfer.setData(\"makeItTick\",\"true\");// this is needed just to make drag/drop event trigger.\r\n\r\n            this.dataTransfer.setData(\"source\", dragEvent);\r\n            this.onDragStart.emit(dragEvent);\r\n        }\r\n    }\r\n    \r\n    @HostListener('drag', ['$event']) \r\n    drag(event) {\r\n        const dragEvent: DragEvent = this.dataTransfer.getData(\"source\");\r\n\r\n        dragEvent.cursorX = event.pageX ? event.pageX : event.clientX;// + document.body.scrollLeft + document.documentElement.scrollLeft\r\n        dragEvent.cursorY = event.pageY ? event.pageY : event.clientY;// + document.body.scrollTop + document.documentElement.scrollTop\r\n        \r\n        if (this.dragEnabled(dragEvent)) {\r\n            this.onDrag.emit(dragEvent);\r\n        }\r\n    }\r\n    \r\n    @HostListener('dragend', ['$event']) \r\n    dragEnd(event) {\r\n        event.stopPropagation();\r\n\r\n        const dragEvent: DragEvent = this.dataTransfer.getData(\"source\");\r\n\r\n        dragEvent.cursorX = event.pageX ? event.pageX : event.clientX;// + document.body.scrollLeft + document.documentElement.scrollLeft\r\n        dragEvent.cursorY = event.pageY ? event.pageY : event.clientY;// + document.body.scrollTop + document.documentElement.scrollTop\r\n        \r\n        this.onDragEnd.emit(dragEvent);\r\n        this.renderer.setElementClass(this.el.nativeElement, \"drag-over\", false);\r\n    }\r\n}\r\n",
    "import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { DataTransfer } from './datatransfer';\r\nimport { DragDirective } from './drag.directive';\r\nimport { DropDirective } from './drop.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n\t\tDragDirective,\r\n\t\tDropDirective\r\n  ],\r\n  exports: [\r\n\t\tDragDirective,\r\n\t\tDropDirective\r\n  ],\r\n  entryComponents: [\r\n  ],\r\n  providers: [\r\n\t\tDragDirective,\r\n\t\tDropDirective,\r\n    DataTransfer\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\n\r\nexport class DragDropModule {}\r\n"
  ],
  "names": [
    "DataTransfer",
    "this",
    "data",
    "prototype",
    "setData",
    "name",
    "value",
    "getData",
    "type",
    "Injectable",
    "DropDirective",
    "dataTransfer",
    "renderer",
    "el",
    "dropEffect",
    "dropEnabled",
    "event",
    "onDragEnter",
    "EventEmitter",
    "onDragLeave",
    "onDrop",
    "onDragOver",
    "createDropEvent",
    "source",
    "destination",
    "medium",
    "node",
    "nativeElement",
    "cursorX",
    "pageX",
    "clientX",
    "cursorY",
    "pageY",
    "clientY",
    "drop",
    "preventDefault",
    "dropEvent",
    "setElementClass",
    "emit",
    "dragEnter",
    "dragLeave",
    "dragOver",
    "Directive",
    "args",
    "selector",
    "Renderer",
    "ElementRef",
    "Input",
    "Output",
    "HostListener",
    "DragDirective",
    "dragEffect",
    "dragEnabled",
    "onDragStart",
    "onDragEnd",
    "onDrag",
    "dragStart",
    "stopPropagation",
    "rect",
    "getBoundingClientRect",
    "X",
    "Y",
    "dragEvent",
    "offset",
    "x",
    "left",
    "y",
    "top",
    "effectAllowed",
    "drag",
    "dragEnd",
    "host",
    "[draggable]",
    "DragDropModule",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports",
    "entryComponents",
    "providers",
    "schemas",
    "CUSTOM_ELEMENTS_SCHEMA"
  ],
  "mappings": "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"
}
